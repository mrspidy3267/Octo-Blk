name: Build Release APK

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

concurrency:
  group: "release-build"
  cancel-in-progress: true

env:
  KEYSTORE_PATH: release.keystore
  KEYSTORE_PASSWORD: android_keystore_password
  KEY_ALIAS: release_key_alias
  KEY_PASSWORD: android_key_password
  BUILD_TOOLS_VERSION: "34.0.0"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Validate Gradle Wrapper
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Gradle
        uses: gradle/wrapper-validation-action@v3

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'
          cache: gradle

      - name: Generate Release Keystore
        run: |
          keytool -genkey -v \
            -keystore ${{ env.KEYSTORE_PATH }} \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias ${{ env.KEY_ALIAS }} \
            -storepass ${{ env.KEYSTORE_PASSWORD }} \
            -keypass ${{ env.KEY_PASSWORD }} \
            -dname "CN=Android Release, OU=Development, O=Your Organization, L=City, S=State, C=US"

      - name: Configure Signing
        run: |
          # Create signing configuration file
          cat << EOF > signing-config.gradle
          android {
              signingConfigs {
                  release {
                      storeFile file("../${{ env.KEYSTORE_PATH }}")
                      storePassword "${{ env.KEYSTORE_PASSWORD }}"
                      keyAlias "${{ env.KEY_ALIAS }}"
                      keyPassword "${{ env.KEY_PASSWORD }}"
                  }
              }
              
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }
          EOF
          
          # Find and update app's build.gradle
          APP_GRADLE="app/build.gradle"
          if [ -f "$APP_GRADLE" ]; then
            echo "apply from: '../signing-config.gradle'" >> "$APP_GRADLE"
          else
            echo "Error: Could not find app/build.gradle"
            exit 1
          fi

      - name: Grant execution permission to Gradle Wrapper
        run: chmod +x gradlew

      - name: Build Release APK
        run: ./gradlew assembleRelease --stacktrace

      - name: Locate APK Files
        id: apk-location
        run: |
          APK_PATH=$(find . -type f -name "*.apk" -path "*/build/outputs/apk/release/*" -not -name "*unsigned*" | head -n 1)
          echo "Found APK at: $APK_PATH"
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

      - name: Generate APK Checksum
        run: |
          APK_PATH="${{ steps.apk-location.outputs.apk_path }}"
          echo "Generating checksums for: $APK_PATH"
          sha256sum "$APK_PATH" > "${APK_PATH}.sha256"
          md5sum "$APK_PATH" > "${APK_PATH}.md5"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.apk-location.outputs.apk_path }}
            ${{ steps.apk-location.outputs.apk_path }}.sha256
            ${{ steps.apk-location.outputs.apk_path }}.md5
          draft: true
          prerelease: false
          generate_release_notes: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Release APK
          path: |
            ${{ steps.apk-location.outputs.apk_path }}
            ${{ steps.apk-location.outputs.apk_path }}.sha256
            ${{ steps.apk-location.outputs.apk_path }}.md5

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            **/build/reports
            **/build/outputs/logs
