name: Universal Android Build

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Source repository to clone'
        required: true
        default: ''
      branch:
        description: 'Branch to checkout'
        required: false
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repository }}
        ref: ${{ github.event.inputs.branch }}
        fetch-depth: 1

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Detect Android Project Structure
      id: project-structure
      run: |
        # Find all gradle files
        GRADLE_FILES=$(find . -name "build.gradle" -o -name "build.gradle.kts")
        
        # Find potential app modules
        APP_MODULES=$(find . -name "build.gradle" -o -name "build.gradle.kts" | grep -E "/app/|/mobile/|/application/" | grep -v "buildSrc")
        
        # Print debug information
        echo "All Gradle files:"
        echo "$GRADLE_FILES"
        echo ""
        echo "Potential App Modules:"
        echo "$APP_MODULES"
        
        # Determine primary app module
        if [ -n "$APP_MODULES" ]; then
          PRIMARY_MODULE=$(echo "$APP_MODULES" | head -n 1 | sed 's|^\./||' | xargs dirname)
          echo "Primary module detected: $PRIMARY_MODULE"
          echo "primary_module=$PRIMARY_MODULE" >> $GITHUB_OUTPUT
        else
          echo "No clear app module found"
          exit 1
        fi

    - name: Generate Keystore
      env:
        KEYSTORE_PASSWORD: android_build_key
      run: |
        keytool -genkey -v -keystore release.jks -keyalg RSA \
                -keysize 2048 -validity 10000 \
                -alias androidbuildkey \
                -storepass $KEYSTORE_PASSWORD \
                -keypass $KEYSTORE_PASSWORD \
                -dname "CN=Android Build, OU=Development, O=Your Organization, L=City, S=State, C=Country"

    - name: Prepare Build
      working-directory: ${{ steps.project-structure.outputs.primary_module }}
      run: |
        # Make gradlew executable if it exists
        if [ -f "./gradlew" ]; then
          chmod +x gradlew
        elif [ -f "../gradlew" ]; then
          chmod +x ../gradlew
        fi

        # Attempt to update signing configuration
        BUILDFILE=$(find . -maxdepth 1 \( -name "build.gradle" -o -name "build.gradle.kts" \) | head -n 1)
        if [ -n "$BUILDFILE" ]; then
          sed -i 's/signingConfigs {}/signingConfigs {\
              release {\
                  storeFile file("../../release.jks")\
                  storePassword "android_build_key"\
                  keyAlias "androidbuildkey"\
                  keyPassword "android_build_key"\
              }\
          }/' "$BUILDFILE"
          
          sed -i 's/buildTypes {/buildTypes {\
              release {\
                  signingConfig signingConfigs.release\
                  minifyEnabled true\
                  proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"\
              }/' "$BUILDFILE"
        fi

    - name: Build Debug APK
      working-directory: ${{ steps.project-structure.outputs.primary_module }}
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew assembleDebug
        elif [ -f "../gradlew" ]; then
          ../gradlew assembleDebug
        else
          gradle assembleDebug
        fi

    - name: Build Release APK
      working-directory: ${{ steps.project-structure.outputs.primary_module }}
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew assembleRelease
        elif [ -f "../gradlew" ]; then
          ../gradlew assembleRelease
        else
          gradle assembleRelease
        fi

    - name: Find and Upload APKs
      run: |
        echo "Finding Debug APKs..."
        DEBUG_APKS=$(find . -path "*/build/outputs/apk/debug/*.apk" ! -name "*-unsigned.apk")
        
        echo "Finding Release APKs..."
        RELEASE_APKS=$(find . -path "*/build/outputs/apk/release/*.apk" ! -name "*-unsigned.apk")
        
        if [ -n "$DEBUG_APKS" ]; then
          echo "Debug APKs found. Uploading..."
          mkdir -p debug-apks
          cp $DEBUG_APKS debug-apks/
        else
          echo "No debug APKs found"
        fi
        
        if [ -n "$RELEASE_APKS" ]; then
          echo "Release APKs found. Uploading..."
          mkdir -p release-apks
          cp $RELEASE_APKS release-apks/
        else
          echo "No release APKs found"
        fi

    - name: Upload Debug APKs
      uses: actions/upload-artifact@v3
      with:
        name: debug-apks
        path: debug-apks/*.apk

    - name: Upload Release APKs
      uses: actions/upload-artifact@v3
      with:
        name: release-apks
        path: release-apks/*.apk

    - name: Collect Build Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          **/build/reports
          **/build/outputs/logs
